import streamlit as st
import pandas as pd

import plotly.express as px
import asyncio

from utils import get_info_outliers

st.title("HW_1. –¢–∏–º–æ–Ω–∏–Ω –ê–Ω–¥—Ä–µ–π –°–µ—Ä–≥–µ–≤–∏—á")
st.header("–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö")

API_KEY = '1824818bd112e614de8890e506dbabfe'
list_city_name = ['New York', 'London', 'Paris', 'Tokyo', 'Moscow', 'Sydney',
				  'Berlin', 'Beijing', 'Rio de Janeiro', 'Dubai', 'Los Angeles',
				  'Singapore', 'Mumbai', 'Cairo', 'Mexico City']

uploaded_file = st.file_uploader("–í—ã–±–µ—Ä–∏—Ç–µ CSV-—Ñ–∞–π–ª", type=['csv'])
if uploaded_file is not None:
	df = pd.read_csv(uploaded_file)
	df['timestamp'] = pd.to_datetime(df['timestamp'], format="%Y-%m-%d")
	st.dataframe(df.head())

	input_city_name = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –≤ –∫–æ—Ç–æ—Ä–æ–º –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å —Ç–µ–∫—É—â—É—é —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É", 
				tuple(list_city_name))

	input_api = st.text_input('–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π API-–∫–ª—é—á —Å —Å–∞–π—Ç–∞ [openweathermap.org](https://openweathermap.org/)')
	if input_api == "":
		st.text("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–æ–≥–æ–¥–µ –Ω–µ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∞, –ø–æ–∫–∞ –≤—ã –Ω–µ –≤–≤–µ–¥–µ—Ç–µ —Å–≤–æ–π API-–∫–ª—é—áüëÜüëÜüëÜ")
	else:
		resp_flag, resp_curr_temp, df_data = asyncio.run(get_info_outliers(api_key=input_api, city_name=input_city_name, data=df, season='winter'))
		if resp_flag == 'TotalExtraError':
			st.text("""{"code":401, "message": "Invalid API key. Please see https://openweathermap.org/faq#error401 for more info."}""")
		else:
			if resp_flag == 1:
				st.text(f"""–¢–µ–∫—É—â–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤ –≥–æ—Ä–æ–¥–µ {input_city_name}: {resp_curr_temp}‚ÑÉ. \n–î–∞–Ω–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ —è–≤–ª—è–µ—Ç—Å—è –∞–Ω–æ–º–∞–ª—å–Ω–æ–π –¥–ª—è —ç—Ç–æ–≥–æ —Å–µ–∑–æ–Ω–∞.""")
			elif resp_flag == 0:
				st.text(f"""–¢–µ–∫—É—â–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤ –≥–æ—Ä–æ–¥–µ {input_city_name}: {resp_curr_temp}‚ÑÉ. \n–î–∞–Ω–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ —è–≤–ª—è–µ—Ç—Å—è –Ω–æ—Ä–º–∞–ª—å–Ω–æ–π –¥–ª—è —ç—Ç–æ–≥–æ —Å–µ–∑–æ–Ω–∞.""")

			if df_data:
				st.subheader(f"–û–ø–∏—Å–∞—Ç–µ–ª—å–Ω—ã–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –¥–∞–Ω–Ω—ã–º –∑–∞ 10 –ª–µ—Ç")
				st.write(df_data['raw_data'][['temperature']].describe())
				# st.text(f"–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏ –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤ –≥–æ—Ä–æ–¥–µ {input_city_name}: {round(df_data['temp_min'], 2)}‚ÑÉ")
				# st.text(f"–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤ –≥–æ—Ä–æ–¥–µ {input_city_name}: {round(df_data['temp_max'], 2)}‚ÑÉ")
				# st.text(f"–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏ —Å—Ä–µ–¥–Ω—è—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤ –≥–æ—Ä–æ–¥–µ {input_city_name}: {round(df_data['temp_mean'], 2)}‚ÑÉ")
				st.subheader(f"–í—Ä–µ–º–µ–Ω–Ω–æ–π —Ä—è–¥ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä —Å –≤—ã–¥–µ–ª–µ–Ω–∏–µ–º –∞–Ω–æ–º–∞–ª–∏–π")
				df_data['raw_data']['is_outlier_season'] = df_data['raw_data']['is_outlier_season'].replace({True: "–ê–Ω–æ–º–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è"})
				fig1 = px.line(df_data['raw_data'], x='timestamp', y="temperature", title=f"""–ì—Ä–∞—Ñ–∏–∫ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä (‚ÑÉ) –≤ –≥–æ—Ä–æ–¥–µ {input_city_name}""")
				fig2 = px.scatter(df_data['raw_data'].loc[df_data['raw_data']['is_outlier_season']=='–ê–Ω–æ–º–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è'], y="temperature", x="timestamp", color="is_outlier_season", color_discrete_sequence=['red'])
				st.plotly_chart(fig1.add_trace(fig2.data[0]))
				st.subheader(f"–°–µ–∑–æ–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è –≥–æ—Ä–æ–¥–∞ {input_city_name}")
				st.write(df_data['season_profile'])
else:
	st.text("–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, –≤—ã–±–µ—Ä–∏—Ç–µ CSV-—Ñ–∞–π–ª (–º–æ–∂–µ—Ç–µ –≤–∑—è—Ç—å —Ñ–∞–π–ª temperature_data.csv –∏–∑ –º–æ–µ–≥–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è).")





